/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeeEstimateBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeEstimateBucket{}

// FeeEstimateBucket struct for FeeEstimateBucket
type FeeEstimateBucket struct {
	Feerate *int32 `json:"feerate,omitempty"`
	EstimatedSeconds *float32 `json:"estimatedSeconds,omitempty"`
}

// NewFeeEstimateBucket instantiates a new FeeEstimateBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeEstimateBucket() *FeeEstimateBucket {
	this := FeeEstimateBucket{}
	var feerate int32 = 1
	this.Feerate = &feerate
	var estimatedSeconds float32 = 0.004
	this.EstimatedSeconds = &estimatedSeconds
	return &this
}

// NewFeeEstimateBucketWithDefaults instantiates a new FeeEstimateBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeEstimateBucketWithDefaults() *FeeEstimateBucket {
	this := FeeEstimateBucket{}
	var feerate int32 = 1
	this.Feerate = &feerate
	var estimatedSeconds float32 = 0.004
	this.EstimatedSeconds = &estimatedSeconds
	return &this
}

// GetFeerate returns the Feerate field value if set, zero value otherwise.
func (o *FeeEstimateBucket) GetFeerate() int32 {
	if o == nil || IsNil(o.Feerate) {
		var ret int32
		return ret
	}
	return *o.Feerate
}

// GetFeerateOk returns a tuple with the Feerate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeEstimateBucket) GetFeerateOk() (*int32, bool) {
	if o == nil || IsNil(o.Feerate) {
		return nil, false
	}
	return o.Feerate, true
}

// HasFeerate returns a boolean if a field has been set.
func (o *FeeEstimateBucket) HasFeerate() bool {
	if o != nil && !IsNil(o.Feerate) {
		return true
	}

	return false
}

// SetFeerate gets a reference to the given int32 and assigns it to the Feerate field.
func (o *FeeEstimateBucket) SetFeerate(v int32) {
	o.Feerate = &v
}

// GetEstimatedSeconds returns the EstimatedSeconds field value if set, zero value otherwise.
func (o *FeeEstimateBucket) GetEstimatedSeconds() float32 {
	if o == nil || IsNil(o.EstimatedSeconds) {
		var ret float32
		return ret
	}
	return *o.EstimatedSeconds
}

// GetEstimatedSecondsOk returns a tuple with the EstimatedSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeEstimateBucket) GetEstimatedSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.EstimatedSeconds) {
		return nil, false
	}
	return o.EstimatedSeconds, true
}

// HasEstimatedSeconds returns a boolean if a field has been set.
func (o *FeeEstimateBucket) HasEstimatedSeconds() bool {
	if o != nil && !IsNil(o.EstimatedSeconds) {
		return true
	}

	return false
}

// SetEstimatedSeconds gets a reference to the given float32 and assigns it to the EstimatedSeconds field.
func (o *FeeEstimateBucket) SetEstimatedSeconds(v float32) {
	o.EstimatedSeconds = &v
}

func (o FeeEstimateBucket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeEstimateBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Feerate) {
		toSerialize["feerate"] = o.Feerate
	}
	if !IsNil(o.EstimatedSeconds) {
		toSerialize["estimatedSeconds"] = o.EstimatedSeconds
	}
	return toSerialize, nil
}

type NullableFeeEstimateBucket struct {
	value *FeeEstimateBucket
	isSet bool
}

func (v NullableFeeEstimateBucket) Get() *FeeEstimateBucket {
	return v.value
}

func (v *NullableFeeEstimateBucket) Set(val *FeeEstimateBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeEstimateBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeEstimateBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeEstimateBucket(val *FeeEstimateBucket) *NullableFeeEstimateBucket {
	return &NullableFeeEstimateBucket{value: val, isSet: true}
}

func (v NullableFeeEstimateBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeEstimateBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


