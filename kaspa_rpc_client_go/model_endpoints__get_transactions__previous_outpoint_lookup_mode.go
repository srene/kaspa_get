/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EndpointsGetTransactionsPreviousOutpointLookupMode An enumeration.
type EndpointsGetTransactionsPreviousOutpointLookupMode string

// List of endpoints__get_transactions__PreviousOutpointLookupMode
const (
	NO EndpointsGetTransactionsPreviousOutpointLookupMode = "no"
	LIGHT EndpointsGetTransactionsPreviousOutpointLookupMode = "light"
	FULL EndpointsGetTransactionsPreviousOutpointLookupMode = "full"
)

// All allowed values of EndpointsGetTransactionsPreviousOutpointLookupMode enum
var AllowedEndpointsGetTransactionsPreviousOutpointLookupModeEnumValues = []EndpointsGetTransactionsPreviousOutpointLookupMode{
	"no",
	"light",
	"full",
}

func (v *EndpointsGetTransactionsPreviousOutpointLookupMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointsGetTransactionsPreviousOutpointLookupMode(value)
	for _, existing := range AllowedEndpointsGetTransactionsPreviousOutpointLookupModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointsGetTransactionsPreviousOutpointLookupMode", value)
}

// NewEndpointsGetTransactionsPreviousOutpointLookupModeFromValue returns a pointer to a valid EndpointsGetTransactionsPreviousOutpointLookupMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointsGetTransactionsPreviousOutpointLookupModeFromValue(v string) (*EndpointsGetTransactionsPreviousOutpointLookupMode, error) {
	ev := EndpointsGetTransactionsPreviousOutpointLookupMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointsGetTransactionsPreviousOutpointLookupMode: valid values are %v", v, AllowedEndpointsGetTransactionsPreviousOutpointLookupModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointsGetTransactionsPreviousOutpointLookupMode) IsValid() bool {
	for _, existing := range AllowedEndpointsGetTransactionsPreviousOutpointLookupModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to endpoints__get_transactions__PreviousOutpointLookupMode value
func (v EndpointsGetTransactionsPreviousOutpointLookupMode) Ptr() *EndpointsGetTransactionsPreviousOutpointLookupMode {
	return &v
}

type NullableEndpointsGetTransactionsPreviousOutpointLookupMode struct {
	value *EndpointsGetTransactionsPreviousOutpointLookupMode
	isSet bool
}

func (v NullableEndpointsGetTransactionsPreviousOutpointLookupMode) Get() *EndpointsGetTransactionsPreviousOutpointLookupMode {
	return v.value
}

func (v *NullableEndpointsGetTransactionsPreviousOutpointLookupMode) Set(val *EndpointsGetTransactionsPreviousOutpointLookupMode) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointsGetTransactionsPreviousOutpointLookupMode) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointsGetTransactionsPreviousOutpointLookupMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointsGetTransactionsPreviousOutpointLookupMode(val *EndpointsGetTransactionsPreviousOutpointLookupMode) *NullableEndpointsGetTransactionsPreviousOutpointLookupMode {
	return &NullableEndpointsGetTransactionsPreviousOutpointLookupMode{value: val, isSet: true}
}

func (v NullableEndpointsGetTransactionsPreviousOutpointLookupMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointsGetTransactionsPreviousOutpointLookupMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

