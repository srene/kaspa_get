/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitTxInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitTxInput{}

// SubmitTxInput struct for SubmitTxInput
type SubmitTxInput struct {
	PreviousOutpoint SubmitTxOutpoint `json:"previousOutpoint"`
	SignatureScript string `json:"signatureScript"`
	Sequence int32 `json:"sequence"`
	SigOpCount int32 `json:"sigOpCount"`
}

type _SubmitTxInput SubmitTxInput

// NewSubmitTxInput instantiates a new SubmitTxInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitTxInput(previousOutpoint SubmitTxOutpoint, signatureScript string, sequence int32, sigOpCount int32) *SubmitTxInput {
	this := SubmitTxInput{}
	this.PreviousOutpoint = previousOutpoint
	this.SignatureScript = signatureScript
	this.Sequence = sequence
	this.SigOpCount = sigOpCount
	return &this
}

// NewSubmitTxInputWithDefaults instantiates a new SubmitTxInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitTxInputWithDefaults() *SubmitTxInput {
	this := SubmitTxInput{}
	return &this
}

// GetPreviousOutpoint returns the PreviousOutpoint field value
func (o *SubmitTxInput) GetPreviousOutpoint() SubmitTxOutpoint {
	if o == nil {
		var ret SubmitTxOutpoint
		return ret
	}

	return o.PreviousOutpoint
}

// GetPreviousOutpointOk returns a tuple with the PreviousOutpoint field value
// and a boolean to check if the value has been set.
func (o *SubmitTxInput) GetPreviousOutpointOk() (*SubmitTxOutpoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousOutpoint, true
}

// SetPreviousOutpoint sets field value
func (o *SubmitTxInput) SetPreviousOutpoint(v SubmitTxOutpoint) {
	o.PreviousOutpoint = v
}

// GetSignatureScript returns the SignatureScript field value
func (o *SubmitTxInput) GetSignatureScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureScript
}

// GetSignatureScriptOk returns a tuple with the SignatureScript field value
// and a boolean to check if the value has been set.
func (o *SubmitTxInput) GetSignatureScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureScript, true
}

// SetSignatureScript sets field value
func (o *SubmitTxInput) SetSignatureScript(v string) {
	o.SignatureScript = v
}

// GetSequence returns the Sequence field value
func (o *SubmitTxInput) GetSequence() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value
// and a boolean to check if the value has been set.
func (o *SubmitTxInput) GetSequenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sequence, true
}

// SetSequence sets field value
func (o *SubmitTxInput) SetSequence(v int32) {
	o.Sequence = v
}

// GetSigOpCount returns the SigOpCount field value
func (o *SubmitTxInput) GetSigOpCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SigOpCount
}

// GetSigOpCountOk returns a tuple with the SigOpCount field value
// and a boolean to check if the value has been set.
func (o *SubmitTxInput) GetSigOpCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SigOpCount, true
}

// SetSigOpCount sets field value
func (o *SubmitTxInput) SetSigOpCount(v int32) {
	o.SigOpCount = v
}

func (o SubmitTxInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitTxInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["previousOutpoint"] = o.PreviousOutpoint
	toSerialize["signatureScript"] = o.SignatureScript
	toSerialize["sequence"] = o.Sequence
	toSerialize["sigOpCount"] = o.SigOpCount
	return toSerialize, nil
}

func (o *SubmitTxInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"previousOutpoint",
		"signatureScript",
		"sequence",
		"sigOpCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitTxInput := _SubmitTxInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitTxInput)

	if err != nil {
		return err
	}

	*o = SubmitTxInput(varSubmitTxInput)

	return err
}

type NullableSubmitTxInput struct {
	value *SubmitTxInput
	isSet bool
}

func (v NullableSubmitTxInput) Get() *SubmitTxInput {
	return v.value
}

func (v *NullableSubmitTxInput) Set(val *SubmitTxInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitTxInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitTxInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitTxInput(val *SubmitTxInput) *NullableSubmitTxInput {
	return &NullableSubmitTxInput{value: val, isSet: true}
}

func (v NullableSubmitTxInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitTxInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


