/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KaspaBlocksAPIService KaspaBlocksAPI service
type KaspaBlocksAPIService service

type ApiGetBlockBlocksBlockIdGetRequest struct {
	ctx context.Context
	ApiService *KaspaBlocksAPIService
	blockId string
	includeTransactions *bool
	includeColor *bool
}

func (r ApiGetBlockBlocksBlockIdGetRequest) IncludeTransactions(includeTransactions bool) ApiGetBlockBlocksBlockIdGetRequest {
	r.includeTransactions = &includeTransactions
	return r
}

func (r ApiGetBlockBlocksBlockIdGetRequest) IncludeColor(includeColor bool) ApiGetBlockBlocksBlockIdGetRequest {
	r.includeColor = &includeColor
	return r
}

func (r ApiGetBlockBlocksBlockIdGetRequest) Execute() (*BlockModel, *http.Response, error) {
	return r.ApiService.GetBlockBlocksBlockIdGetExecute(r)
}

/*
GetBlockBlocksBlockIdGet Get Block

Get block information for a given block id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockId
 @return ApiGetBlockBlocksBlockIdGetRequest
*/
func (a *KaspaBlocksAPIService) GetBlockBlocksBlockIdGet(ctx context.Context, blockId string) ApiGetBlockBlocksBlockIdGetRequest {
	return ApiGetBlockBlocksBlockIdGetRequest{
		ApiService: a,
		ctx: ctx,
		blockId: blockId,
	}
}

// Execute executes the request
//  @return BlockModel
func (a *KaspaBlocksAPIService) GetBlockBlocksBlockIdGetExecute(r ApiGetBlockBlocksBlockIdGetRequest) (*BlockModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KaspaBlocksAPIService.GetBlockBlocksBlockIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blocks/{blockId}"
	localVarPath = strings.Replace(localVarPath, "{"+"blockId"+"}", url.PathEscape(parameterValueToString(r.blockId, "blockId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeTransactions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTransactions", r.includeTransactions, "form", "")
	} else {
		var defaultValue bool = true
		r.includeTransactions = &defaultValue
	}
	if r.includeColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeColor", r.includeColor, "form", "")
	} else {
		var defaultValue bool = false
		r.includeColor = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlocksBlocksGetRequest struct {
	ctx context.Context
	ApiService *KaspaBlocksAPIService
	lowHash *string
	includeBlocks *bool
	includeTransactions *bool
}

func (r ApiGetBlocksBlocksGetRequest) LowHash(lowHash string) ApiGetBlocksBlocksGetRequest {
	r.lowHash = &lowHash
	return r
}

func (r ApiGetBlocksBlocksGetRequest) IncludeBlocks(includeBlocks bool) ApiGetBlocksBlocksGetRequest {
	r.includeBlocks = &includeBlocks
	return r
}

func (r ApiGetBlocksBlocksGetRequest) IncludeTransactions(includeTransactions bool) ApiGetBlocksBlocksGetRequest {
	r.includeTransactions = &includeTransactions
	return r
}

func (r ApiGetBlocksBlocksGetRequest) Execute() (*BlockResponse, *http.Response, error) {
	return r.ApiService.GetBlocksBlocksGetExecute(r)
}

/*
GetBlocksBlocksGet Get Blocks

Lists block beginning from a low hash (block id).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBlocksBlocksGetRequest
*/
func (a *KaspaBlocksAPIService) GetBlocksBlocksGet(ctx context.Context) ApiGetBlocksBlocksGetRequest {
	return ApiGetBlocksBlocksGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BlockResponse
func (a *KaspaBlocksAPIService) GetBlocksBlocksGetExecute(r ApiGetBlocksBlocksGetRequest) (*BlockResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KaspaBlocksAPIService.GetBlocksBlocksGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blocks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lowHash == nil {
		return localVarReturnValue, nil, reportError("lowHash is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "lowHash", r.lowHash, "form", "")
	if r.includeBlocks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeBlocks", r.includeBlocks, "form", "")
	} else {
		var defaultValue bool = false
		r.includeBlocks = &defaultValue
	}
	if r.includeTransactions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTransactions", r.includeTransactions, "form", "")
	} else {
		var defaultValue bool = false
		r.includeTransactions = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest struct {
	ctx context.Context
	ApiService *KaspaBlocksAPIService
	blueScore *int32
	includeTransactions *bool
}

func (r ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest) BlueScore(blueScore int32) ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest {
	r.blueScore = &blueScore
	return r
}

func (r ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest) IncludeTransactions(includeTransactions bool) ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest {
	r.includeTransactions = &includeTransactions
	return r
}

func (r ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest) Execute() ([]BlockModel, *http.Response, error) {
	return r.ApiService.GetBlocksFromBluescoreBlocksFromBluescoreGetExecute(r)
}

/*
GetBlocksFromBluescoreBlocksFromBluescoreGet Get Blocks From Bluescore

Lists blocks of a given blueScore

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest
*/
func (a *KaspaBlocksAPIService) GetBlocksFromBluescoreBlocksFromBluescoreGet(ctx context.Context) ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest {
	return ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BlockModel
func (a *KaspaBlocksAPIService) GetBlocksFromBluescoreBlocksFromBluescoreGetExecute(r ApiGetBlocksFromBluescoreBlocksFromBluescoreGetRequest) ([]BlockModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BlockModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KaspaBlocksAPIService.GetBlocksFromBluescoreBlocksFromBluescoreGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blocks-from-bluescore"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.blueScore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blueScore", r.blueScore, "form", "")
	} else {
		var defaultValue int32 = 43679173
		r.blueScore = &defaultValue
	}
	if r.includeTransactions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTransactions", r.includeTransactions, "form", "")
	} else {
		var defaultValue bool = false
		r.includeTransactions = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
