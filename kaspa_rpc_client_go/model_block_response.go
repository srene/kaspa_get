/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlockResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockResponse{}

// BlockResponse struct for BlockResponse
type BlockResponse struct {
	BlockHashes []string `json:"blockHashes,omitempty"`
	Blocks []BlockModel `json:"blocks,omitempty"`
}

// NewBlockResponse instantiates a new BlockResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockResponse() *BlockResponse {
	this := BlockResponse{}
	return &this
}

// NewBlockResponseWithDefaults instantiates a new BlockResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockResponseWithDefaults() *BlockResponse {
	this := BlockResponse{}
	return &this
}

// GetBlockHashes returns the BlockHashes field value if set, zero value otherwise.
func (o *BlockResponse) GetBlockHashes() []string {
	if o == nil || IsNil(o.BlockHashes) {
		var ret []string
		return ret
	}
	return o.BlockHashes
}

// GetBlockHashesOk returns a tuple with the BlockHashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockResponse) GetBlockHashesOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockHashes) {
		return nil, false
	}
	return o.BlockHashes, true
}

// HasBlockHashes returns a boolean if a field has been set.
func (o *BlockResponse) HasBlockHashes() bool {
	if o != nil && !IsNil(o.BlockHashes) {
		return true
	}

	return false
}

// SetBlockHashes gets a reference to the given []string and assigns it to the BlockHashes field.
func (o *BlockResponse) SetBlockHashes(v []string) {
	o.BlockHashes = v
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *BlockResponse) GetBlocks() []BlockModel {
	if o == nil || IsNil(o.Blocks) {
		var ret []BlockModel
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockResponse) GetBlocksOk() ([]BlockModel, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *BlockResponse) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []BlockModel and assigns it to the Blocks field.
func (o *BlockResponse) SetBlocks(v []BlockModel) {
	o.Blocks = v
}

func (o BlockResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockHashes) {
		toSerialize["blockHashes"] = o.BlockHashes
	}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	return toSerialize, nil
}

type NullableBlockResponse struct {
	value *BlockResponse
	isSet bool
}

func (v NullableBlockResponse) Get() *BlockResponse {
	return v.value
}

func (v *NullableBlockResponse) Set(val *BlockResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockResponse(val *BlockResponse) *NullableBlockResponse {
	return &NullableBlockResponse{value: val, isSet: true}
}

func (v NullableBlockResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


