/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BalancesByAddressEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalancesByAddressEntry{}

// BalancesByAddressEntry struct for BalancesByAddressEntry
type BalancesByAddressEntry struct {
	Address *string `json:"address,omitempty"`
	Balance *int32 `json:"balance,omitempty"`
}

// NewBalancesByAddressEntry instantiates a new BalancesByAddressEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalancesByAddressEntry() *BalancesByAddressEntry {
	this := BalancesByAddressEntry{}
	var address string = "kaspatest:qpqz2vxj23kvh0m73ta2jjn2u4cv4tlufqns2eap8mxyyt0rvrxy6ejkful67"
	this.Address = &address
	var balance int32 = 12451591699
	this.Balance = &balance
	return &this
}

// NewBalancesByAddressEntryWithDefaults instantiates a new BalancesByAddressEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalancesByAddressEntryWithDefaults() *BalancesByAddressEntry {
	this := BalancesByAddressEntry{}
	var address string = "kaspatest:qpqz2vxj23kvh0m73ta2jjn2u4cv4tlufqns2eap8mxyyt0rvrxy6ejkful67"
	this.Address = &address
	var balance int32 = 12451591699
	this.Balance = &balance
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *BalancesByAddressEntry) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesByAddressEntry) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *BalancesByAddressEntry) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *BalancesByAddressEntry) SetAddress(v string) {
	o.Address = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *BalancesByAddressEntry) GetBalance() int32 {
	if o == nil || IsNil(o.Balance) {
		var ret int32
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesByAddressEntry) GetBalanceOk() (*int32, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *BalancesByAddressEntry) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given int32 and assigns it to the Balance field.
func (o *BalancesByAddressEntry) SetBalance(v int32) {
	o.Balance = &v
}

func (o BalancesByAddressEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalancesByAddressEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

type NullableBalancesByAddressEntry struct {
	value *BalancesByAddressEntry
	isSet bool
}

func (v NullableBalancesByAddressEntry) Get() *BalancesByAddressEntry {
	return v.value
}

func (v *NullableBalancesByAddressEntry) Set(val *BalancesByAddressEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableBalancesByAddressEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableBalancesByAddressEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalancesByAddressEntry(val *BalancesByAddressEntry) *NullableBalancesByAddressEntry {
	return &NullableBalancesByAddressEntry{value: val, isSet: true}
}

func (v NullableBalancesByAddressEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalancesByAddressEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


