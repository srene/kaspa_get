/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FeeEstimateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeEstimateResponse{}

// FeeEstimateResponse struct for FeeEstimateResponse
type FeeEstimateResponse struct {
	PriorityBucket FeeEstimateBucket `json:"priorityBucket"`
	NormalBuckets []FeeEstimateBucket `json:"normalBuckets"`
	LowBuckets []FeeEstimateBucket `json:"lowBuckets"`
}

type _FeeEstimateResponse FeeEstimateResponse

// NewFeeEstimateResponse instantiates a new FeeEstimateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeEstimateResponse(priorityBucket FeeEstimateBucket, normalBuckets []FeeEstimateBucket, lowBuckets []FeeEstimateBucket) *FeeEstimateResponse {
	this := FeeEstimateResponse{}
	this.PriorityBucket = priorityBucket
	this.NormalBuckets = normalBuckets
	this.LowBuckets = lowBuckets
	return &this
}

// NewFeeEstimateResponseWithDefaults instantiates a new FeeEstimateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeEstimateResponseWithDefaults() *FeeEstimateResponse {
	this := FeeEstimateResponse{}
	return &this
}

// GetPriorityBucket returns the PriorityBucket field value
func (o *FeeEstimateResponse) GetPriorityBucket() FeeEstimateBucket {
	if o == nil {
		var ret FeeEstimateBucket
		return ret
	}

	return o.PriorityBucket
}

// GetPriorityBucketOk returns a tuple with the PriorityBucket field value
// and a boolean to check if the value has been set.
func (o *FeeEstimateResponse) GetPriorityBucketOk() (*FeeEstimateBucket, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriorityBucket, true
}

// SetPriorityBucket sets field value
func (o *FeeEstimateResponse) SetPriorityBucket(v FeeEstimateBucket) {
	o.PriorityBucket = v
}

// GetNormalBuckets returns the NormalBuckets field value
func (o *FeeEstimateResponse) GetNormalBuckets() []FeeEstimateBucket {
	if o == nil {
		var ret []FeeEstimateBucket
		return ret
	}

	return o.NormalBuckets
}

// GetNormalBucketsOk returns a tuple with the NormalBuckets field value
// and a boolean to check if the value has been set.
func (o *FeeEstimateResponse) GetNormalBucketsOk() ([]FeeEstimateBucket, bool) {
	if o == nil {
		return nil, false
	}
	return o.NormalBuckets, true
}

// SetNormalBuckets sets field value
func (o *FeeEstimateResponse) SetNormalBuckets(v []FeeEstimateBucket) {
	o.NormalBuckets = v
}

// GetLowBuckets returns the LowBuckets field value
func (o *FeeEstimateResponse) GetLowBuckets() []FeeEstimateBucket {
	if o == nil {
		var ret []FeeEstimateBucket
		return ret
	}

	return o.LowBuckets
}

// GetLowBucketsOk returns a tuple with the LowBuckets field value
// and a boolean to check if the value has been set.
func (o *FeeEstimateResponse) GetLowBucketsOk() ([]FeeEstimateBucket, bool) {
	if o == nil {
		return nil, false
	}
	return o.LowBuckets, true
}

// SetLowBuckets sets field value
func (o *FeeEstimateResponse) SetLowBuckets(v []FeeEstimateBucket) {
	o.LowBuckets = v
}

func (o FeeEstimateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeEstimateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["priorityBucket"] = o.PriorityBucket
	toSerialize["normalBuckets"] = o.NormalBuckets
	toSerialize["lowBuckets"] = o.LowBuckets
	return toSerialize, nil
}

func (o *FeeEstimateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"priorityBucket",
		"normalBuckets",
		"lowBuckets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeEstimateResponse := _FeeEstimateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeeEstimateResponse)

	if err != nil {
		return err
	}

	*o = FeeEstimateResponse(varFeeEstimateResponse)

	return err
}

type NullableFeeEstimateResponse struct {
	value *FeeEstimateResponse
	isSet bool
}

func (v NullableFeeEstimateResponse) Get() *FeeEstimateResponse {
	return v.value
}

func (v *NullableFeeEstimateResponse) Set(val *FeeEstimateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeEstimateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeEstimateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeEstimateResponse(val *FeeEstimateResponse) *NullableFeeEstimateResponse {
	return &NullableFeeEstimateResponse{value: val, isSet: true}
}

func (v NullableFeeEstimateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeEstimateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


