/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitTxOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitTxOutput{}

// SubmitTxOutput struct for SubmitTxOutput
type SubmitTxOutput struct {
	Amount int32 `json:"amount"`
	ScriptPublicKey SubmitTxScriptPublicKey `json:"scriptPublicKey"`
}

type _SubmitTxOutput SubmitTxOutput

// NewSubmitTxOutput instantiates a new SubmitTxOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitTxOutput(amount int32, scriptPublicKey SubmitTxScriptPublicKey) *SubmitTxOutput {
	this := SubmitTxOutput{}
	this.Amount = amount
	this.ScriptPublicKey = scriptPublicKey
	return &this
}

// NewSubmitTxOutputWithDefaults instantiates a new SubmitTxOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitTxOutputWithDefaults() *SubmitTxOutput {
	this := SubmitTxOutput{}
	return &this
}

// GetAmount returns the Amount field value
func (o *SubmitTxOutput) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SubmitTxOutput) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SubmitTxOutput) SetAmount(v int32) {
	o.Amount = v
}

// GetScriptPublicKey returns the ScriptPublicKey field value
func (o *SubmitTxOutput) GetScriptPublicKey() SubmitTxScriptPublicKey {
	if o == nil {
		var ret SubmitTxScriptPublicKey
		return ret
	}

	return o.ScriptPublicKey
}

// GetScriptPublicKeyOk returns a tuple with the ScriptPublicKey field value
// and a boolean to check if the value has been set.
func (o *SubmitTxOutput) GetScriptPublicKeyOk() (*SubmitTxScriptPublicKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScriptPublicKey, true
}

// SetScriptPublicKey sets field value
func (o *SubmitTxOutput) SetScriptPublicKey(v SubmitTxScriptPublicKey) {
	o.ScriptPublicKey = v
}

func (o SubmitTxOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitTxOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["scriptPublicKey"] = o.ScriptPublicKey
	return toSerialize, nil
}

func (o *SubmitTxOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"scriptPublicKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitTxOutput := _SubmitTxOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitTxOutput)

	if err != nil {
		return err
	}

	*o = SubmitTxOutput(varSubmitTxOutput)

	return err
}

type NullableSubmitTxOutput struct {
	value *SubmitTxOutput
	isSet bool
}

func (v NullableSubmitTxOutput) Get() *SubmitTxOutput {
	return v.value
}

func (v *NullableSubmitTxOutput) Set(val *SubmitTxOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitTxOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitTxOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitTxOutput(val *SubmitTxOutput) *NullableSubmitTxOutput {
	return &NullableSubmitTxOutput{value: val, isSet: true}
}

func (v NullableSubmitTxOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitTxOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


