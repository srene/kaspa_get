/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitTxOutpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitTxOutpoint{}

// SubmitTxOutpoint struct for SubmitTxOutpoint
type SubmitTxOutpoint struct {
	TransactionId string `json:"transactionId"`
	Index int32 `json:"index"`
}

type _SubmitTxOutpoint SubmitTxOutpoint

// NewSubmitTxOutpoint instantiates a new SubmitTxOutpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitTxOutpoint(transactionId string, index int32) *SubmitTxOutpoint {
	this := SubmitTxOutpoint{}
	this.TransactionId = transactionId
	this.Index = index
	return &this
}

// NewSubmitTxOutpointWithDefaults instantiates a new SubmitTxOutpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitTxOutpointWithDefaults() *SubmitTxOutpoint {
	this := SubmitTxOutpoint{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *SubmitTxOutpoint) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *SubmitTxOutpoint) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *SubmitTxOutpoint) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetIndex returns the Index field value
func (o *SubmitTxOutpoint) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *SubmitTxOutpoint) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *SubmitTxOutpoint) SetIndex(v int32) {
	o.Index = v
}

func (o SubmitTxOutpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitTxOutpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionId"] = o.TransactionId
	toSerialize["index"] = o.Index
	return toSerialize, nil
}

func (o *SubmitTxOutpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transactionId",
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitTxOutpoint := _SubmitTxOutpoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitTxOutpoint)

	if err != nil {
		return err
	}

	*o = SubmitTxOutpoint(varSubmitTxOutpoint)

	return err
}

type NullableSubmitTxOutpoint struct {
	value *SubmitTxOutpoint
	isSet bool
}

func (v NullableSubmitTxOutpoint) Get() *SubmitTxOutpoint {
	return v.value
}

func (v *NullableSubmitTxOutpoint) Set(val *SubmitTxOutpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitTxOutpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitTxOutpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitTxOutpoint(val *SubmitTxOutpoint) *NullableSubmitTxOutpoint {
	return &NullableSubmitTxOutpoint{value: val, isSet: true}
}

func (v NullableSubmitTxOutpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitTxOutpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


