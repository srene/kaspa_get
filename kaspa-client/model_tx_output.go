/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TxOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TxOutput{}

// TxOutput struct for TxOutput
type TxOutput struct {
	TransactionId string `json:"transaction_id"`
	Index int32 `json:"index"`
	Amount int32 `json:"amount"`
	ScriptPublicKey *string `json:"script_public_key,omitempty"`
	ScriptPublicKeyAddress *string `json:"script_public_key_address,omitempty"`
	ScriptPublicKeyType *string `json:"script_public_key_type,omitempty"`
	AcceptingBlockHash *string `json:"accepting_block_hash,omitempty"`
}

type _TxOutput TxOutput

// NewTxOutput instantiates a new TxOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTxOutput(transactionId string, index int32, amount int32) *TxOutput {
	this := TxOutput{}
	this.TransactionId = transactionId
	this.Index = index
	this.Amount = amount
	return &this
}

// NewTxOutputWithDefaults instantiates a new TxOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTxOutputWithDefaults() *TxOutput {
	this := TxOutput{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *TxOutput) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *TxOutput) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *TxOutput) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetIndex returns the Index field value
func (o *TxOutput) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *TxOutput) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *TxOutput) SetIndex(v int32) {
	o.Index = v
}

// GetAmount returns the Amount field value
func (o *TxOutput) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TxOutput) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TxOutput) SetAmount(v int32) {
	o.Amount = v
}

// GetScriptPublicKey returns the ScriptPublicKey field value if set, zero value otherwise.
func (o *TxOutput) GetScriptPublicKey() string {
	if o == nil || IsNil(o.ScriptPublicKey) {
		var ret string
		return ret
	}
	return *o.ScriptPublicKey
}

// GetScriptPublicKeyOk returns a tuple with the ScriptPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxOutput) GetScriptPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ScriptPublicKey) {
		return nil, false
	}
	return o.ScriptPublicKey, true
}

// HasScriptPublicKey returns a boolean if a field has been set.
func (o *TxOutput) HasScriptPublicKey() bool {
	if o != nil && !IsNil(o.ScriptPublicKey) {
		return true
	}

	return false
}

// SetScriptPublicKey gets a reference to the given string and assigns it to the ScriptPublicKey field.
func (o *TxOutput) SetScriptPublicKey(v string) {
	o.ScriptPublicKey = &v
}

// GetScriptPublicKeyAddress returns the ScriptPublicKeyAddress field value if set, zero value otherwise.
func (o *TxOutput) GetScriptPublicKeyAddress() string {
	if o == nil || IsNil(o.ScriptPublicKeyAddress) {
		var ret string
		return ret
	}
	return *o.ScriptPublicKeyAddress
}

// GetScriptPublicKeyAddressOk returns a tuple with the ScriptPublicKeyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxOutput) GetScriptPublicKeyAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ScriptPublicKeyAddress) {
		return nil, false
	}
	return o.ScriptPublicKeyAddress, true
}

// HasScriptPublicKeyAddress returns a boolean if a field has been set.
func (o *TxOutput) HasScriptPublicKeyAddress() bool {
	if o != nil && !IsNil(o.ScriptPublicKeyAddress) {
		return true
	}

	return false
}

// SetScriptPublicKeyAddress gets a reference to the given string and assigns it to the ScriptPublicKeyAddress field.
func (o *TxOutput) SetScriptPublicKeyAddress(v string) {
	o.ScriptPublicKeyAddress = &v
}

// GetScriptPublicKeyType returns the ScriptPublicKeyType field value if set, zero value otherwise.
func (o *TxOutput) GetScriptPublicKeyType() string {
	if o == nil || IsNil(o.ScriptPublicKeyType) {
		var ret string
		return ret
	}
	return *o.ScriptPublicKeyType
}

// GetScriptPublicKeyTypeOk returns a tuple with the ScriptPublicKeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxOutput) GetScriptPublicKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ScriptPublicKeyType) {
		return nil, false
	}
	return o.ScriptPublicKeyType, true
}

// HasScriptPublicKeyType returns a boolean if a field has been set.
func (o *TxOutput) HasScriptPublicKeyType() bool {
	if o != nil && !IsNil(o.ScriptPublicKeyType) {
		return true
	}

	return false
}

// SetScriptPublicKeyType gets a reference to the given string and assigns it to the ScriptPublicKeyType field.
func (o *TxOutput) SetScriptPublicKeyType(v string) {
	o.ScriptPublicKeyType = &v
}

// GetAcceptingBlockHash returns the AcceptingBlockHash field value if set, zero value otherwise.
func (o *TxOutput) GetAcceptingBlockHash() string {
	if o == nil || IsNil(o.AcceptingBlockHash) {
		var ret string
		return ret
	}
	return *o.AcceptingBlockHash
}

// GetAcceptingBlockHashOk returns a tuple with the AcceptingBlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxOutput) GetAcceptingBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.AcceptingBlockHash) {
		return nil, false
	}
	return o.AcceptingBlockHash, true
}

// HasAcceptingBlockHash returns a boolean if a field has been set.
func (o *TxOutput) HasAcceptingBlockHash() bool {
	if o != nil && !IsNil(o.AcceptingBlockHash) {
		return true
	}

	return false
}

// SetAcceptingBlockHash gets a reference to the given string and assigns it to the AcceptingBlockHash field.
func (o *TxOutput) SetAcceptingBlockHash(v string) {
	o.AcceptingBlockHash = &v
}

func (o TxOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TxOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_id"] = o.TransactionId
	toSerialize["index"] = o.Index
	toSerialize["amount"] = o.Amount
	if !IsNil(o.ScriptPublicKey) {
		toSerialize["script_public_key"] = o.ScriptPublicKey
	}
	if !IsNil(o.ScriptPublicKeyAddress) {
		toSerialize["script_public_key_address"] = o.ScriptPublicKeyAddress
	}
	if !IsNil(o.ScriptPublicKeyType) {
		toSerialize["script_public_key_type"] = o.ScriptPublicKeyType
	}
	if !IsNil(o.AcceptingBlockHash) {
		toSerialize["accepting_block_hash"] = o.AcceptingBlockHash
	}
	return toSerialize, nil
}

func (o *TxOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_id",
		"index",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTxOutput := _TxOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTxOutput)

	if err != nil {
		return err
	}

	*o = TxOutput(varTxOutput)

	return err
}

type NullableTxOutput struct {
	value *TxOutput
	isSet bool
}

func (v NullableTxOutput) Get() *TxOutput {
	return v.value
}

func (v *NullableTxOutput) Set(val *TxOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableTxOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableTxOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxOutput(val *TxOutput) *NullableTxOutput {
	return &NullableTxOutput{value: val, isSet: true}
}

func (v NullableTxOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


