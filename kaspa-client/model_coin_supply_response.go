/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CoinSupplyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoinSupplyResponse{}

// CoinSupplyResponse struct for CoinSupplyResponse
type CoinSupplyResponse struct {
	CirculatingSupply *string `json:"circulatingSupply,omitempty"`
	MaxSupply *string `json:"maxSupply,omitempty"`
}

// NewCoinSupplyResponse instantiates a new CoinSupplyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoinSupplyResponse() *CoinSupplyResponse {
	this := CoinSupplyResponse{}
	var circulatingSupply string = "1000900697580640180"
	this.CirculatingSupply = &circulatingSupply
	var maxSupply string = "2900000000000000000"
	this.MaxSupply = &maxSupply
	return &this
}

// NewCoinSupplyResponseWithDefaults instantiates a new CoinSupplyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoinSupplyResponseWithDefaults() *CoinSupplyResponse {
	this := CoinSupplyResponse{}
	var circulatingSupply string = "1000900697580640180"
	this.CirculatingSupply = &circulatingSupply
	var maxSupply string = "2900000000000000000"
	this.MaxSupply = &maxSupply
	return &this
}

// GetCirculatingSupply returns the CirculatingSupply field value if set, zero value otherwise.
func (o *CoinSupplyResponse) GetCirculatingSupply() string {
	if o == nil || IsNil(o.CirculatingSupply) {
		var ret string
		return ret
	}
	return *o.CirculatingSupply
}

// GetCirculatingSupplyOk returns a tuple with the CirculatingSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoinSupplyResponse) GetCirculatingSupplyOk() (*string, bool) {
	if o == nil || IsNil(o.CirculatingSupply) {
		return nil, false
	}
	return o.CirculatingSupply, true
}

// HasCirculatingSupply returns a boolean if a field has been set.
func (o *CoinSupplyResponse) HasCirculatingSupply() bool {
	if o != nil && !IsNil(o.CirculatingSupply) {
		return true
	}

	return false
}

// SetCirculatingSupply gets a reference to the given string and assigns it to the CirculatingSupply field.
func (o *CoinSupplyResponse) SetCirculatingSupply(v string) {
	o.CirculatingSupply = &v
}

// GetMaxSupply returns the MaxSupply field value if set, zero value otherwise.
func (o *CoinSupplyResponse) GetMaxSupply() string {
	if o == nil || IsNil(o.MaxSupply) {
		var ret string
		return ret
	}
	return *o.MaxSupply
}

// GetMaxSupplyOk returns a tuple with the MaxSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoinSupplyResponse) GetMaxSupplyOk() (*string, bool) {
	if o == nil || IsNil(o.MaxSupply) {
		return nil, false
	}
	return o.MaxSupply, true
}

// HasMaxSupply returns a boolean if a field has been set.
func (o *CoinSupplyResponse) HasMaxSupply() bool {
	if o != nil && !IsNil(o.MaxSupply) {
		return true
	}

	return false
}

// SetMaxSupply gets a reference to the given string and assigns it to the MaxSupply field.
func (o *CoinSupplyResponse) SetMaxSupply(v string) {
	o.MaxSupply = &v
}

func (o CoinSupplyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoinSupplyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CirculatingSupply) {
		toSerialize["circulatingSupply"] = o.CirculatingSupply
	}
	if !IsNil(o.MaxSupply) {
		toSerialize["maxSupply"] = o.MaxSupply
	}
	return toSerialize, nil
}

type NullableCoinSupplyResponse struct {
	value *CoinSupplyResponse
	isSet bool
}

func (v NullableCoinSupplyResponse) Get() *CoinSupplyResponse {
	return v.value
}

func (v *NullableCoinSupplyResponse) Set(val *CoinSupplyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCoinSupplyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCoinSupplyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoinSupplyResponse(val *CoinSupplyResponse) *NullableCoinSupplyResponse {
	return &NullableCoinSupplyResponse{value: val, isSet: true}
}

func (v NullableCoinSupplyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoinSupplyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


