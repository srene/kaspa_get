/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TxIdResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TxIdResponse{}

// TxIdResponse struct for TxIdResponse
type TxIdResponse struct {
	Address string `json:"address"`
	Active bool `json:"active"`
}

type _TxIdResponse TxIdResponse

// NewTxIdResponse instantiates a new TxIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTxIdResponse(address string, active bool) *TxIdResponse {
	this := TxIdResponse{}
	this.Address = address
	this.Active = active
	return &this
}

// NewTxIdResponseWithDefaults instantiates a new TxIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTxIdResponseWithDefaults() *TxIdResponse {
	this := TxIdResponse{}
	return &this
}

// GetAddress returns the Address field value
func (o *TxIdResponse) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TxIdResponse) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TxIdResponse) SetAddress(v string) {
	o.Address = v
}

// GetActive returns the Active field value
func (o *TxIdResponse) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *TxIdResponse) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *TxIdResponse) SetActive(v bool) {
	o.Active = v
}

func (o TxIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TxIdResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["active"] = o.Active
	return toSerialize, nil
}

func (o *TxIdResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTxIdResponse := _TxIdResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTxIdResponse)

	if err != nil {
		return err
	}

	*o = TxIdResponse(varTxIdResponse)

	return err
}

type NullableTxIdResponse struct {
	value *TxIdResponse
	isSet bool
}

func (v NullableTxIdResponse) Get() *TxIdResponse {
	return v.value
}

func (v *NullableTxIdResponse) Set(val *TxIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTxIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTxIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxIdResponse(val *TxIdResponse) *NullableTxIdResponse {
	return &NullableTxIdResponse{value: val, isSet: true}
}

func (v NullableTxIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


