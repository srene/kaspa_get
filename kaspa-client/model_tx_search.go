/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TxSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TxSearch{}

// TxSearch struct for TxSearch
type TxSearch struct {
	TransactionIds []string `json:"transactionIds,omitempty"`
	AcceptingBlueScores *TxSearchAcceptingBlueScores `json:"acceptingBlueScores,omitempty"`
}

// NewTxSearch instantiates a new TxSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTxSearch() *TxSearch {
	this := TxSearch{}
	return &this
}

// NewTxSearchWithDefaults instantiates a new TxSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTxSearchWithDefaults() *TxSearch {
	this := TxSearch{}
	return &this
}

// GetTransactionIds returns the TransactionIds field value if set, zero value otherwise.
func (o *TxSearch) GetTransactionIds() []string {
	if o == nil || IsNil(o.TransactionIds) {
		var ret []string
		return ret
	}
	return o.TransactionIds
}

// GetTransactionIdsOk returns a tuple with the TransactionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxSearch) GetTransactionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TransactionIds) {
		return nil, false
	}
	return o.TransactionIds, true
}

// HasTransactionIds returns a boolean if a field has been set.
func (o *TxSearch) HasTransactionIds() bool {
	if o != nil && !IsNil(o.TransactionIds) {
		return true
	}

	return false
}

// SetTransactionIds gets a reference to the given []string and assigns it to the TransactionIds field.
func (o *TxSearch) SetTransactionIds(v []string) {
	o.TransactionIds = v
}

// GetAcceptingBlueScores returns the AcceptingBlueScores field value if set, zero value otherwise.
func (o *TxSearch) GetAcceptingBlueScores() TxSearchAcceptingBlueScores {
	if o == nil || IsNil(o.AcceptingBlueScores) {
		var ret TxSearchAcceptingBlueScores
		return ret
	}
	return *o.AcceptingBlueScores
}

// GetAcceptingBlueScoresOk returns a tuple with the AcceptingBlueScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxSearch) GetAcceptingBlueScoresOk() (*TxSearchAcceptingBlueScores, bool) {
	if o == nil || IsNil(o.AcceptingBlueScores) {
		return nil, false
	}
	return o.AcceptingBlueScores, true
}

// HasAcceptingBlueScores returns a boolean if a field has been set.
func (o *TxSearch) HasAcceptingBlueScores() bool {
	if o != nil && !IsNil(o.AcceptingBlueScores) {
		return true
	}

	return false
}

// SetAcceptingBlueScores gets a reference to the given TxSearchAcceptingBlueScores and assigns it to the AcceptingBlueScores field.
func (o *TxSearch) SetAcceptingBlueScores(v TxSearchAcceptingBlueScores) {
	o.AcceptingBlueScores = &v
}

func (o TxSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TxSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionIds) {
		toSerialize["transactionIds"] = o.TransactionIds
	}
	if !IsNil(o.AcceptingBlueScores) {
		toSerialize["acceptingBlueScores"] = o.AcceptingBlueScores
	}
	return toSerialize, nil
}

type NullableTxSearch struct {
	value *TxSearch
	isSet bool
}

func (v NullableTxSearch) Get() *TxSearch {
	return v.value
}

func (v *NullableTxSearch) Set(val *TxSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableTxSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableTxSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxSearch(val *TxSearch) *NullableTxSearch {
	return &NullableTxSearch{value: val, isSet: true}
}

func (v NullableTxSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


