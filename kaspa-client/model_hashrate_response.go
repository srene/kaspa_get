/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HashrateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HashrateResponse{}

// HashrateResponse struct for HashrateResponse
type HashrateResponse struct {
	Hashrate *float32 `json:"hashrate,omitempty"`
}

// NewHashrateResponse instantiates a new HashrateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHashrateResponse() *HashrateResponse {
	this := HashrateResponse{}
	var hashrate float32 = 12000132
	this.Hashrate = &hashrate
	return &this
}

// NewHashrateResponseWithDefaults instantiates a new HashrateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHashrateResponseWithDefaults() *HashrateResponse {
	this := HashrateResponse{}
	var hashrate float32 = 12000132
	this.Hashrate = &hashrate
	return &this
}

// GetHashrate returns the Hashrate field value if set, zero value otherwise.
func (o *HashrateResponse) GetHashrate() float32 {
	if o == nil || IsNil(o.Hashrate) {
		var ret float32
		return ret
	}
	return *o.Hashrate
}

// GetHashrateOk returns a tuple with the Hashrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HashrateResponse) GetHashrateOk() (*float32, bool) {
	if o == nil || IsNil(o.Hashrate) {
		return nil, false
	}
	return o.Hashrate, true
}

// HasHashrate returns a boolean if a field has been set.
func (o *HashrateResponse) HasHashrate() bool {
	if o != nil && !IsNil(o.Hashrate) {
		return true
	}

	return false
}

// SetHashrate gets a reference to the given float32 and assigns it to the Hashrate field.
func (o *HashrateResponse) SetHashrate(v float32) {
	o.Hashrate = &v
}

func (o HashrateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HashrateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hashrate) {
		toSerialize["hashrate"] = o.Hashrate
	}
	return toSerialize, nil
}

type NullableHashrateResponse struct {
	value *HashrateResponse
	isSet bool
}

func (v NullableHashrateResponse) Get() *HashrateResponse {
	return v.value
}

func (v *NullableHashrateResponse) Set(val *HashrateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHashrateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHashrateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashrateResponse(val *HashrateResponse) *NullableHashrateResponse {
	return &NullableHashrateResponse{value: val, isSet: true}
}

func (v NullableHashrateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashrateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


