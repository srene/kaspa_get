/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DBCheckStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DBCheckStatus{}

// DBCheckStatus struct for DBCheckStatus
type DBCheckStatus struct {
	IsSynced *bool `json:"isSynced,omitempty"`
	BlueScore *int32 `json:"blueScore,omitempty"`
	BlueScoreDiff *int32 `json:"blueScoreDiff,omitempty"`
	AcceptedTxBlockTime *int32 `json:"acceptedTxBlockTime,omitempty"`
	AcceptedTxBlockTimeDiff *int32 `json:"acceptedTxBlockTimeDiff,omitempty"`
}

// NewDBCheckStatus instantiates a new DBCheckStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBCheckStatus() *DBCheckStatus {
	this := DBCheckStatus{}
	var isSynced bool = true
	this.IsSynced = &isSynced
	return &this
}

// NewDBCheckStatusWithDefaults instantiates a new DBCheckStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBCheckStatusWithDefaults() *DBCheckStatus {
	this := DBCheckStatus{}
	var isSynced bool = true
	this.IsSynced = &isSynced
	return &this
}

// GetIsSynced returns the IsSynced field value if set, zero value otherwise.
func (o *DBCheckStatus) GetIsSynced() bool {
	if o == nil || IsNil(o.IsSynced) {
		var ret bool
		return ret
	}
	return *o.IsSynced
}

// GetIsSyncedOk returns a tuple with the IsSynced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBCheckStatus) GetIsSyncedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSynced) {
		return nil, false
	}
	return o.IsSynced, true
}

// HasIsSynced returns a boolean if a field has been set.
func (o *DBCheckStatus) HasIsSynced() bool {
	if o != nil && !IsNil(o.IsSynced) {
		return true
	}

	return false
}

// SetIsSynced gets a reference to the given bool and assigns it to the IsSynced field.
func (o *DBCheckStatus) SetIsSynced(v bool) {
	o.IsSynced = &v
}

// GetBlueScore returns the BlueScore field value if set, zero value otherwise.
func (o *DBCheckStatus) GetBlueScore() int32 {
	if o == nil || IsNil(o.BlueScore) {
		var ret int32
		return ret
	}
	return *o.BlueScore
}

// GetBlueScoreOk returns a tuple with the BlueScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBCheckStatus) GetBlueScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.BlueScore) {
		return nil, false
	}
	return o.BlueScore, true
}

// HasBlueScore returns a boolean if a field has been set.
func (o *DBCheckStatus) HasBlueScore() bool {
	if o != nil && !IsNil(o.BlueScore) {
		return true
	}

	return false
}

// SetBlueScore gets a reference to the given int32 and assigns it to the BlueScore field.
func (o *DBCheckStatus) SetBlueScore(v int32) {
	o.BlueScore = &v
}

// GetBlueScoreDiff returns the BlueScoreDiff field value if set, zero value otherwise.
func (o *DBCheckStatus) GetBlueScoreDiff() int32 {
	if o == nil || IsNil(o.BlueScoreDiff) {
		var ret int32
		return ret
	}
	return *o.BlueScoreDiff
}

// GetBlueScoreDiffOk returns a tuple with the BlueScoreDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBCheckStatus) GetBlueScoreDiffOk() (*int32, bool) {
	if o == nil || IsNil(o.BlueScoreDiff) {
		return nil, false
	}
	return o.BlueScoreDiff, true
}

// HasBlueScoreDiff returns a boolean if a field has been set.
func (o *DBCheckStatus) HasBlueScoreDiff() bool {
	if o != nil && !IsNil(o.BlueScoreDiff) {
		return true
	}

	return false
}

// SetBlueScoreDiff gets a reference to the given int32 and assigns it to the BlueScoreDiff field.
func (o *DBCheckStatus) SetBlueScoreDiff(v int32) {
	o.BlueScoreDiff = &v
}

// GetAcceptedTxBlockTime returns the AcceptedTxBlockTime field value if set, zero value otherwise.
func (o *DBCheckStatus) GetAcceptedTxBlockTime() int32 {
	if o == nil || IsNil(o.AcceptedTxBlockTime) {
		var ret int32
		return ret
	}
	return *o.AcceptedTxBlockTime
}

// GetAcceptedTxBlockTimeOk returns a tuple with the AcceptedTxBlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBCheckStatus) GetAcceptedTxBlockTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AcceptedTxBlockTime) {
		return nil, false
	}
	return o.AcceptedTxBlockTime, true
}

// HasAcceptedTxBlockTime returns a boolean if a field has been set.
func (o *DBCheckStatus) HasAcceptedTxBlockTime() bool {
	if o != nil && !IsNil(o.AcceptedTxBlockTime) {
		return true
	}

	return false
}

// SetAcceptedTxBlockTime gets a reference to the given int32 and assigns it to the AcceptedTxBlockTime field.
func (o *DBCheckStatus) SetAcceptedTxBlockTime(v int32) {
	o.AcceptedTxBlockTime = &v
}

// GetAcceptedTxBlockTimeDiff returns the AcceptedTxBlockTimeDiff field value if set, zero value otherwise.
func (o *DBCheckStatus) GetAcceptedTxBlockTimeDiff() int32 {
	if o == nil || IsNil(o.AcceptedTxBlockTimeDiff) {
		var ret int32
		return ret
	}
	return *o.AcceptedTxBlockTimeDiff
}

// GetAcceptedTxBlockTimeDiffOk returns a tuple with the AcceptedTxBlockTimeDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBCheckStatus) GetAcceptedTxBlockTimeDiffOk() (*int32, bool) {
	if o == nil || IsNil(o.AcceptedTxBlockTimeDiff) {
		return nil, false
	}
	return o.AcceptedTxBlockTimeDiff, true
}

// HasAcceptedTxBlockTimeDiff returns a boolean if a field has been set.
func (o *DBCheckStatus) HasAcceptedTxBlockTimeDiff() bool {
	if o != nil && !IsNil(o.AcceptedTxBlockTimeDiff) {
		return true
	}

	return false
}

// SetAcceptedTxBlockTimeDiff gets a reference to the given int32 and assigns it to the AcceptedTxBlockTimeDiff field.
func (o *DBCheckStatus) SetAcceptedTxBlockTimeDiff(v int32) {
	o.AcceptedTxBlockTimeDiff = &v
}

func (o DBCheckStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DBCheckStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsSynced) {
		toSerialize["isSynced"] = o.IsSynced
	}
	if !IsNil(o.BlueScore) {
		toSerialize["blueScore"] = o.BlueScore
	}
	if !IsNil(o.BlueScoreDiff) {
		toSerialize["blueScoreDiff"] = o.BlueScoreDiff
	}
	if !IsNil(o.AcceptedTxBlockTime) {
		toSerialize["acceptedTxBlockTime"] = o.AcceptedTxBlockTime
	}
	if !IsNil(o.AcceptedTxBlockTimeDiff) {
		toSerialize["acceptedTxBlockTimeDiff"] = o.AcceptedTxBlockTimeDiff
	}
	return toSerialize, nil
}

type NullableDBCheckStatus struct {
	value *DBCheckStatus
	isSet bool
}

func (v NullableDBCheckStatus) Get() *DBCheckStatus {
	return v.value
}

func (v *NullableDBCheckStatus) Set(val *DBCheckStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDBCheckStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDBCheckStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBCheckStatus(val *DBCheckStatus) *NullableDBCheckStatus {
	return &NullableDBCheckStatus{value: val, isSet: true}
}

func (v NullableDBCheckStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBCheckStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


