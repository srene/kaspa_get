/*
Kaspa REST-API server

Testing KaspaNetworkInfoAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/srene/kaspa_get/kaspa-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_KaspaNetworkInfoAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KaspaNetworkInfoAPIService GetBlockdagInfoBlockdagGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetBlockdagInfoBlockdagGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetBlockrewardInfoBlockrewardGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetBlockrewardInfoBlockrewardGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetCirculatingCoinsInfoCoinsupplyCirculatingGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetCirculatingCoinsInfoCoinsupplyCirculatingGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetCoinsupplyInfoCoinsupplyGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetCoinsupplyInfoCoinsupplyGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetFeeEstimateInfoFeeEstimateGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetFeeEstimateInfoFeeEstimateGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetHalvingInfoHalvingGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetHalvingInfoHalvingGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetHashrateInfoHashrateGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetHashrateInfoHashrateGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetKaspadInfoInfoKaspadGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetKaspadInfoInfoKaspadGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetMarketcapInfoMarketcapGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetMarketcapInfoMarketcapGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetMaxHashrateInfoHashrateMaxGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetMaxHashrateInfoHashrateMaxGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetNetworkInfoNetworkGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetNetworkInfoNetworkGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetPriceInfoPriceGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetPriceInfoPriceGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetTotalCoinsInfoCoinsupplyTotalGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetTotalCoinsInfoCoinsupplyTotalGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService GetVirtualSelectedParentBlueScoreInfoVirtualChainBlueScoreGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.GetVirtualSelectedParentBlueScoreInfoVirtualChainBlueScoreGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaNetworkInfoAPIService HealthStateInfoHealthGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaNetworkInfoAPI.HealthStateInfoHealthGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
