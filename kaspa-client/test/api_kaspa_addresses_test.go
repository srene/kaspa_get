/*
Kaspa REST-API server

Testing KaspaAddressesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/srene/kaspa_get/kaspa-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_KaspaAddressesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KaspaAddressesAPIService GetAddressesActiveAddressesActivePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetAddressesActiveAddressesActivePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetBalanceFromKaspaAddressAddressesKaspaAddressBalanceGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var kaspaAddress string

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetBalanceFromKaspaAddressAddressesKaspaAddressBalanceGet(context.Background(), kaspaAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetBalancesFromKaspaAddressesAddressesBalancesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetBalancesFromKaspaAddressesAddressesBalancesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetFullTransactionsForAddressAddressesKaspaAddressFullTransactionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var kaspaAddress string

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetFullTransactionsForAddressAddressesKaspaAddressFullTransactionsGet(context.Background(), kaspaAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetFullTransactionsForAddressPageAddressesKaspaAddressFullTransactionsPageGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var kaspaAddress string

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetFullTransactionsForAddressPageAddressesKaspaAddressFullTransactionsPageGet(context.Background(), kaspaAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetNameForAddressAddressesKaspaAddressNameGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var kaspaAddress string

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetNameForAddressAddressesKaspaAddressNameGet(context.Background(), kaspaAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetTransactionCountForAddressAddressesKaspaAddressTransactionsCountGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var kaspaAddress string

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetTransactionCountForAddressAddressesKaspaAddressTransactionsCountGet(context.Background(), kaspaAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetUtxosForAddressAddressesKaspaAddressUtxosGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var kaspaAddress string

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetUtxosForAddressAddressesKaspaAddressUtxosGet(context.Background(), kaspaAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KaspaAddressesAPIService GetUtxosForAddressesAddressesUtxosPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KaspaAddressesAPI.GetUtxosForAddressesAddressesUtxosPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
