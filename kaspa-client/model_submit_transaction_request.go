/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitTransactionRequest{}

// SubmitTransactionRequest struct for SubmitTransactionRequest
type SubmitTransactionRequest struct {
	Transaction SubmitTxModel `json:"transaction"`
	AllowOrphan *bool `json:"allowOrphan,omitempty"`
}

type _SubmitTransactionRequest SubmitTransactionRequest

// NewSubmitTransactionRequest instantiates a new SubmitTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitTransactionRequest(transaction SubmitTxModel) *SubmitTransactionRequest {
	this := SubmitTransactionRequest{}
	this.Transaction = transaction
	var allowOrphan bool = false
	this.AllowOrphan = &allowOrphan
	return &this
}

// NewSubmitTransactionRequestWithDefaults instantiates a new SubmitTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitTransactionRequestWithDefaults() *SubmitTransactionRequest {
	this := SubmitTransactionRequest{}
	var allowOrphan bool = false
	this.AllowOrphan = &allowOrphan
	return &this
}

// GetTransaction returns the Transaction field value
func (o *SubmitTransactionRequest) GetTransaction() SubmitTxModel {
	if o == nil {
		var ret SubmitTxModel
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *SubmitTransactionRequest) GetTransactionOk() (*SubmitTxModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *SubmitTransactionRequest) SetTransaction(v SubmitTxModel) {
	o.Transaction = v
}

// GetAllowOrphan returns the AllowOrphan field value if set, zero value otherwise.
func (o *SubmitTransactionRequest) GetAllowOrphan() bool {
	if o == nil || IsNil(o.AllowOrphan) {
		var ret bool
		return ret
	}
	return *o.AllowOrphan
}

// GetAllowOrphanOk returns a tuple with the AllowOrphan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitTransactionRequest) GetAllowOrphanOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowOrphan) {
		return nil, false
	}
	return o.AllowOrphan, true
}

// HasAllowOrphan returns a boolean if a field has been set.
func (o *SubmitTransactionRequest) HasAllowOrphan() bool {
	if o != nil && !IsNil(o.AllowOrphan) {
		return true
	}

	return false
}

// SetAllowOrphan gets a reference to the given bool and assigns it to the AllowOrphan field.
func (o *SubmitTransactionRequest) SetAllowOrphan(v bool) {
	o.AllowOrphan = &v
}

func (o SubmitTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction"] = o.Transaction
	if !IsNil(o.AllowOrphan) {
		toSerialize["allowOrphan"] = o.AllowOrphan
	}
	return toSerialize, nil
}

func (o *SubmitTransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitTransactionRequest := _SubmitTransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitTransactionRequest)

	if err != nil {
		return err
	}

	*o = SubmitTransactionRequest(varSubmitTransactionRequest)

	return err
}

type NullableSubmitTransactionRequest struct {
	value *SubmitTransactionRequest
	isSet bool
}

func (v NullableSubmitTransactionRequest) Get() *SubmitTransactionRequest {
	return v.value
}

func (v *NullableSubmitTransactionRequest) Set(val *SubmitTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitTransactionRequest(val *SubmitTransactionRequest) *NullableSubmitTransactionRequest {
	return &NullableSubmitTransactionRequest{value: val, isSet: true}
}

func (v NullableSubmitTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


