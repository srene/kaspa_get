/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MaxHashrateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaxHashrateResponse{}

// MaxHashrateResponse struct for MaxHashrateResponse
type MaxHashrateResponse struct {
	Hashrate *float32 `json:"hashrate,omitempty"`
	Blockheader EndpointsGetHashrateBlockHeader `json:"blockheader"`
}

type _MaxHashrateResponse MaxHashrateResponse

// NewMaxHashrateResponse instantiates a new MaxHashrateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaxHashrateResponse(blockheader EndpointsGetHashrateBlockHeader) *MaxHashrateResponse {
	this := MaxHashrateResponse{}
	var hashrate float32 = 12000132
	this.Hashrate = &hashrate
	this.Blockheader = blockheader
	return &this
}

// NewMaxHashrateResponseWithDefaults instantiates a new MaxHashrateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaxHashrateResponseWithDefaults() *MaxHashrateResponse {
	this := MaxHashrateResponse{}
	var hashrate float32 = 12000132
	this.Hashrate = &hashrate
	return &this
}

// GetHashrate returns the Hashrate field value if set, zero value otherwise.
func (o *MaxHashrateResponse) GetHashrate() float32 {
	if o == nil || IsNil(o.Hashrate) {
		var ret float32
		return ret
	}
	return *o.Hashrate
}

// GetHashrateOk returns a tuple with the Hashrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxHashrateResponse) GetHashrateOk() (*float32, bool) {
	if o == nil || IsNil(o.Hashrate) {
		return nil, false
	}
	return o.Hashrate, true
}

// HasHashrate returns a boolean if a field has been set.
func (o *MaxHashrateResponse) HasHashrate() bool {
	if o != nil && !IsNil(o.Hashrate) {
		return true
	}

	return false
}

// SetHashrate gets a reference to the given float32 and assigns it to the Hashrate field.
func (o *MaxHashrateResponse) SetHashrate(v float32) {
	o.Hashrate = &v
}

// GetBlockheader returns the Blockheader field value
func (o *MaxHashrateResponse) GetBlockheader() EndpointsGetHashrateBlockHeader {
	if o == nil {
		var ret EndpointsGetHashrateBlockHeader
		return ret
	}

	return o.Blockheader
}

// GetBlockheaderOk returns a tuple with the Blockheader field value
// and a boolean to check if the value has been set.
func (o *MaxHashrateResponse) GetBlockheaderOk() (*EndpointsGetHashrateBlockHeader, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blockheader, true
}

// SetBlockheader sets field value
func (o *MaxHashrateResponse) SetBlockheader(v EndpointsGetHashrateBlockHeader) {
	o.Blockheader = v
}

func (o MaxHashrateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaxHashrateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hashrate) {
		toSerialize["hashrate"] = o.Hashrate
	}
	toSerialize["blockheader"] = o.Blockheader
	return toSerialize, nil
}

func (o *MaxHashrateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blockheader",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMaxHashrateResponse := _MaxHashrateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMaxHashrateResponse)

	if err != nil {
		return err
	}

	*o = MaxHashrateResponse(varMaxHashrateResponse)

	return err
}

type NullableMaxHashrateResponse struct {
	value *MaxHashrateResponse
	isSet bool
}

func (v NullableMaxHashrateResponse) Get() *MaxHashrateResponse {
	return v.value
}

func (v *NullableMaxHashrateResponse) Set(val *MaxHashrateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMaxHashrateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMaxHashrateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaxHashrateResponse(val *MaxHashrateResponse) *NullableMaxHashrateResponse {
	return &NullableMaxHashrateResponse{value: val, isSet: true}
}

func (v NullableMaxHashrateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaxHashrateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


