/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionCount{}

// TransactionCount struct for TransactionCount
type TransactionCount struct {
	Total int32 `json:"total"`
	LimitExceeded bool `json:"limit_exceeded"`
}

type _TransactionCount TransactionCount

// NewTransactionCount instantiates a new TransactionCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCount(total int32, limitExceeded bool) *TransactionCount {
	this := TransactionCount{}
	this.Total = total
	this.LimitExceeded = limitExceeded
	return &this
}

// NewTransactionCountWithDefaults instantiates a new TransactionCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCountWithDefaults() *TransactionCount {
	this := TransactionCount{}
	return &this
}

// GetTotal returns the Total field value
func (o *TransactionCount) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *TransactionCount) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *TransactionCount) SetTotal(v int32) {
	o.Total = v
}

// GetLimitExceeded returns the LimitExceeded field value
func (o *TransactionCount) GetLimitExceeded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LimitExceeded
}

// GetLimitExceededOk returns a tuple with the LimitExceeded field value
// and a boolean to check if the value has been set.
func (o *TransactionCount) GetLimitExceededOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitExceeded, true
}

// SetLimitExceeded sets field value
func (o *TransactionCount) SetLimitExceeded(v bool) {
	o.LimitExceeded = v
}

func (o TransactionCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["limit_exceeded"] = o.LimitExceeded
	return toSerialize, nil
}

func (o *TransactionCount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"limit_exceeded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionCount := _TransactionCount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionCount)

	if err != nil {
		return err
	}

	*o = TransactionCount(varTransactionCount)

	return err
}

type NullableTransactionCount struct {
	value *TransactionCount
	isSet bool
}

func (v NullableTransactionCount) Get() *TransactionCount {
	return v.value
}

func (v *NullableTransactionCount) Set(val *TransactionCount) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCount) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCount(val *TransactionCount) *NullableTransactionCount {
	return &NullableTransactionCount{value: val, isSet: true}
}

func (v NullableTransactionCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


