/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitTxModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitTxModel{}

// SubmitTxModel struct for SubmitTxModel
type SubmitTxModel struct {
	Version int32 `json:"version"`
	Inputs []SubmitTxInput `json:"inputs"`
	Outputs []SubmitTxOutput `json:"outputs"`
	LockTime *int32 `json:"lockTime,omitempty"`
	SubnetworkId *string `json:"subnetworkId,omitempty"`
}

type _SubmitTxModel SubmitTxModel

// NewSubmitTxModel instantiates a new SubmitTxModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitTxModel(version int32, inputs []SubmitTxInput, outputs []SubmitTxOutput) *SubmitTxModel {
	this := SubmitTxModel{}
	this.Version = version
	this.Inputs = inputs
	this.Outputs = outputs
	var lockTime int32 = 0
	this.LockTime = &lockTime
	return &this
}

// NewSubmitTxModelWithDefaults instantiates a new SubmitTxModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitTxModelWithDefaults() *SubmitTxModel {
	this := SubmitTxModel{}
	var lockTime int32 = 0
	this.LockTime = &lockTime
	return &this
}

// GetVersion returns the Version field value
func (o *SubmitTxModel) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SubmitTxModel) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SubmitTxModel) SetVersion(v int32) {
	o.Version = v
}

// GetInputs returns the Inputs field value
func (o *SubmitTxModel) GetInputs() []SubmitTxInput {
	if o == nil {
		var ret []SubmitTxInput
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *SubmitTxModel) GetInputsOk() ([]SubmitTxInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *SubmitTxModel) SetInputs(v []SubmitTxInput) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value
func (o *SubmitTxModel) GetOutputs() []SubmitTxOutput {
	if o == nil {
		var ret []SubmitTxOutput
		return ret
	}

	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value
// and a boolean to check if the value has been set.
func (o *SubmitTxModel) GetOutputsOk() ([]SubmitTxOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outputs, true
}

// SetOutputs sets field value
func (o *SubmitTxModel) SetOutputs(v []SubmitTxOutput) {
	o.Outputs = v
}

// GetLockTime returns the LockTime field value if set, zero value otherwise.
func (o *SubmitTxModel) GetLockTime() int32 {
	if o == nil || IsNil(o.LockTime) {
		var ret int32
		return ret
	}
	return *o.LockTime
}

// GetLockTimeOk returns a tuple with the LockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitTxModel) GetLockTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LockTime) {
		return nil, false
	}
	return o.LockTime, true
}

// HasLockTime returns a boolean if a field has been set.
func (o *SubmitTxModel) HasLockTime() bool {
	if o != nil && !IsNil(o.LockTime) {
		return true
	}

	return false
}

// SetLockTime gets a reference to the given int32 and assigns it to the LockTime field.
func (o *SubmitTxModel) SetLockTime(v int32) {
	o.LockTime = &v
}

// GetSubnetworkId returns the SubnetworkId field value if set, zero value otherwise.
func (o *SubmitTxModel) GetSubnetworkId() string {
	if o == nil || IsNil(o.SubnetworkId) {
		var ret string
		return ret
	}
	return *o.SubnetworkId
}

// GetSubnetworkIdOk returns a tuple with the SubnetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitTxModel) GetSubnetworkIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetworkId) {
		return nil, false
	}
	return o.SubnetworkId, true
}

// HasSubnetworkId returns a boolean if a field has been set.
func (o *SubmitTxModel) HasSubnetworkId() bool {
	if o != nil && !IsNil(o.SubnetworkId) {
		return true
	}

	return false
}

// SetSubnetworkId gets a reference to the given string and assigns it to the SubnetworkId field.
func (o *SubmitTxModel) SetSubnetworkId(v string) {
	o.SubnetworkId = &v
}

func (o SubmitTxModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitTxModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["inputs"] = o.Inputs
	toSerialize["outputs"] = o.Outputs
	if !IsNil(o.LockTime) {
		toSerialize["lockTime"] = o.LockTime
	}
	if !IsNil(o.SubnetworkId) {
		toSerialize["subnetworkId"] = o.SubnetworkId
	}
	return toSerialize, nil
}

func (o *SubmitTxModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"inputs",
		"outputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitTxModel := _SubmitTxModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitTxModel)

	if err != nil {
		return err
	}

	*o = SubmitTxModel(varSubmitTxModel)

	return err
}

type NullableSubmitTxModel struct {
	value *SubmitTxModel
	isSet bool
}

func (v NullableSubmitTxModel) Get() *SubmitTxModel {
	return v.value
}

func (v *NullableSubmitTxModel) Set(val *SubmitTxModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitTxModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitTxModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitTxModel(val *SubmitTxModel) *NullableSubmitTxModel {
	return &NullableSubmitTxModel{value: val, isSet: true}
}

func (v NullableSubmitTxModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitTxModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


