/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UtxoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtxoResponse{}

// UtxoResponse struct for UtxoResponse
type UtxoResponse struct {
	Address *string `json:"address,omitempty"`
	Outpoint OutpointModel `json:"outpoint"`
	UtxoEntry UtxoModel `json:"utxoEntry"`
}

type _UtxoResponse UtxoResponse

// NewUtxoResponse instantiates a new UtxoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtxoResponse(outpoint OutpointModel, utxoEntry UtxoModel) *UtxoResponse {
	this := UtxoResponse{}
	var address string = "kaspatest:qpqz2vxj23kvh0m73ta2jjn2u4cv4tlufqns2eap8mxyyt0rvrxy6ejkful67"
	this.Address = &address
	this.Outpoint = outpoint
	this.UtxoEntry = utxoEntry
	return &this
}

// NewUtxoResponseWithDefaults instantiates a new UtxoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtxoResponseWithDefaults() *UtxoResponse {
	this := UtxoResponse{}
	var address string = "kaspatest:qpqz2vxj23kvh0m73ta2jjn2u4cv4tlufqns2eap8mxyyt0rvrxy6ejkful67"
	this.Address = &address
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *UtxoResponse) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtxoResponse) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *UtxoResponse) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *UtxoResponse) SetAddress(v string) {
	o.Address = &v
}

// GetOutpoint returns the Outpoint field value
func (o *UtxoResponse) GetOutpoint() OutpointModel {
	if o == nil {
		var ret OutpointModel
		return ret
	}

	return o.Outpoint
}

// GetOutpointOk returns a tuple with the Outpoint field value
// and a boolean to check if the value has been set.
func (o *UtxoResponse) GetOutpointOk() (*OutpointModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outpoint, true
}

// SetOutpoint sets field value
func (o *UtxoResponse) SetOutpoint(v OutpointModel) {
	o.Outpoint = v
}

// GetUtxoEntry returns the UtxoEntry field value
func (o *UtxoResponse) GetUtxoEntry() UtxoModel {
	if o == nil {
		var ret UtxoModel
		return ret
	}

	return o.UtxoEntry
}

// GetUtxoEntryOk returns a tuple with the UtxoEntry field value
// and a boolean to check if the value has been set.
func (o *UtxoResponse) GetUtxoEntryOk() (*UtxoModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UtxoEntry, true
}

// SetUtxoEntry sets field value
func (o *UtxoResponse) SetUtxoEntry(v UtxoModel) {
	o.UtxoEntry = v
}

func (o UtxoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtxoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["outpoint"] = o.Outpoint
	toSerialize["utxoEntry"] = o.UtxoEntry
	return toSerialize, nil
}

func (o *UtxoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"outpoint",
		"utxoEntry",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUtxoResponse := _UtxoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUtxoResponse)

	if err != nil {
		return err
	}

	*o = UtxoResponse(varUtxoResponse)

	return err
}

type NullableUtxoResponse struct {
	value *UtxoResponse
	isSet bool
}

func (v NullableUtxoResponse) Get() *UtxoResponse {
	return v.value
}

func (v *NullableUtxoResponse) Set(val *UtxoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUtxoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUtxoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtxoResponse(val *UtxoResponse) *NullableUtxoResponse {
	return &NullableUtxoResponse{value: val, isSet: true}
}

func (v NullableUtxoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtxoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


