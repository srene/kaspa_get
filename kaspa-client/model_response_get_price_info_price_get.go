/*
Kaspa REST-API server

This server is to communicate with kaspa network via REST-API

API version: tbd
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// ResponseGetPriceInfoPriceGet struct for ResponseGetPriceInfoPriceGet
type ResponseGetPriceInfoPriceGet struct {
	PriceResponse *PriceResponse
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseGetPriceInfoPriceGet) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into PriceResponse
	err = json.Unmarshal(data, &dst.PriceResponse);
	if err == nil {
		jsonPriceResponse, _ := json.Marshal(dst.PriceResponse)
		if string(jsonPriceResponse) == "{}" { // empty struct
			dst.PriceResponse = nil
		} else {
			return nil // data stored in dst.PriceResponse, return on the first match
		}
	} else {
		dst.PriceResponse = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ResponseGetPriceInfoPriceGet)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseGetPriceInfoPriceGet) MarshalJSON() ([]byte, error) {
	if src.PriceResponse != nil {
		return json.Marshal(&src.PriceResponse)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableResponseGetPriceInfoPriceGet struct {
	value *ResponseGetPriceInfoPriceGet
	isSet bool
}

func (v NullableResponseGetPriceInfoPriceGet) Get() *ResponseGetPriceInfoPriceGet {
	return v.value
}

func (v *NullableResponseGetPriceInfoPriceGet) Set(val *ResponseGetPriceInfoPriceGet) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseGetPriceInfoPriceGet) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseGetPriceInfoPriceGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseGetPriceInfoPriceGet(val *ResponseGetPriceInfoPriceGet) *NullableResponseGetPriceInfoPriceGet {
	return &NullableResponseGetPriceInfoPriceGet{value: val, isSet: true}
}

func (v NullableResponseGetPriceInfoPriceGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseGetPriceInfoPriceGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


